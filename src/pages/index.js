import Head from 'next/head'
import Footer from './footer'
import { motion as m } from 'framer-motion'
import { useState, useEffect } from 'react'
import axios from 'axios'
import csvtojson from 'csvtojson';
import getlocations from '@/functions/getlocations'

export async function getServerSideProps() {
 let weatherData = []
  try {
    const response = await axios.get('https://visual-crossing-weather.p.rapidapi.com/forecast', {
      method: 'GET',
      params: {
        aggregateHours: '24',
        location: 'Banyuwangi',
        contentType: 'csv',
        unitGroup: 'us',
        shortColumnNames: '0'
      },
      headers: {
        'X-RapidAPI-Key': 'aea5e6f851msh0d3019689849da1p138e04jsn8b38e8f2988a',
        'X-RapidAPI-Host': 'visual-crossing-weather.p.rapidapi.com'
      }
    })
    weatherData = await csvtojson().fromString(response.data);
  } catch (error) {
    console.log(error);
  }

  return {
    props: { weatherData }, // will be passed to the page component as props
  }
}

export default function Home(props) {

  const [dayName, setDayName] = useState('');
  const [dateName, setDateName] = useState('');
  const [second, setSeconds] = useState(0);
  const [hour, setHours] = useState(0);
  const [minute, setMinutes] = useState(0);
  const [currentMonts, setCurrentMonth] = useState(0);
  const rows = props.weatherData
  const { location, permission, updateLocation } = getlocations()

  
  let today = new Date();
  const currentMonth = today.getMonth();
  let date = today.getDate()
  let day = today.getDay();
  let daysOfWeek = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"];
  let currentDayName = daysOfWeek[day];

  let hours = today.getHours();
  let minutes = today.getMinutes();
  const formattedMinute = minutes.toLocaleString('en-US', { minimumIntegerDigits: 2, useGrouping: false });
  let seconds = today.getSeconds();

  function fahrenheitToCelsius(fahrenheit) {
    const getCelsius = (fahrenheit - 32) * 5/9;
    const celsius = Math.round(getCelsius)
    return celsius;
  }
  
  useEffect(() => {

      updateLocation()
      setDayName(currentDayName)
      setDateName(date)
      setHours(hours)
      setMinutes(formattedMinute)
      setCurrentMonth(currentMonth)
    return () => clearInterval(1000);
  }, [dayName, dateName, second, hour, minute] );
  return (
    <m.div 
      initial={{ y: "100%" }}
      animate={{ y: "0%" }}
      exit={{ opacity: 1 }}
      transition={{ duration: 0.65, ease: "easeOut" }}
      className="absolute min-w-full"
    >
      <Head>
        <title>Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className={`min-h-[105vh] bg-red-500 mb ${ hour >= 18 ? 'bg-slate-900' : 'bg-orange-400'}`}>
          <div className='items-center justify-center min-h-[80vh] relative px-3'>
            <div className='absolute top-[20vh] overflow-hidden'>
              <m.h1 initial={{ y: "100%" }} animate={{ y: 0 }} transition={{ duration: 0.75, delay: 0.5 }} className='text-4xl font-medium'>{`${ hour } : ${ minute }`}</m.h1>
              <m.p className='font-medium' initial={{ y: "100%" }} animate={{ y: 0 }} transition={{ duration: 0.75, delay: 0.5 }} >{`${dayName} ${dateName}/${ currentMonts+1 }`}</m.p>
              <h1 className='font-medium'>{`${rows[0].Address} ${rows[0].Conditions}`}</h1>
              <div className='mt-10 flex'>
                <h3 className='text-8xl'>{fahrenheitToCelsius(rows[0].Temperature)}</h3>
                <div className='flex'>
                  <div className='ratings'></div>
                  <span className='font-medium text-2xl'>c</span>
                </div>
              </div>
              <div>
                {location ? (
                  <p>Your current location is: {location.latitude}, {location.longitude}</p>
                ) : (
                  <p>Unable to retrieve your location</p>
                )}
              </div>
            </div>
            
          </div>
          <Footer />
        </div>
      </main>
    </m.div>

  )
}
